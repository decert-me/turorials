const fs = require('fs');
const path = require('path');

const DOCS_DIR = path.join(__dirname, 'docs');

function getDirectory(data, catalogueName) {
  let directory
  const lines = data.split('\n');
    const result = [];
    let currentCategory = '';
    
    lines.forEach((line, i) => {
      if (line.startsWith('*')) {
        const match = line.match(/\[([^\]]+)\]\(([^)]+)\)/);
        if (match) {
          const title = match[1];
          const link = match[2].replace(".md","").replace(/^\d+_/, '');
          console.log(link);
          result.push({ title, link, category: currentCategory });
        }
      } else if (line.startsWith('## ')) {
        currentCategory = line.replace('## ', '');
      } else if (line.trim() !== '') {
        result.push({ title: line.trim(), link: undefined, category: currentCategory });
      }
    });
    directory = result;
    const arr = [];
    directory.map((e, i) => {
      e.category ?
      arr.push({
        type: 'category',
        label: e.category,
        items: [
          `${catalogueName}/${e.link}`
        ],
      })
      :
      arr.push(`${catalogueName}/${e.link}`)
    })

    const newArr = arr.reduceRight((acc, item) => {
      if (typeof item === 'object') {
        const existingIndex = acc.findIndex(obj => obj.label === item.label);
      
        if (existingIndex === -1) {
          acc.push(item);
        } else {
          acc[existingIndex].items = [...item.items, ...acc[existingIndex].items];
        }
      } else {
        acc.push(item);
      }
      
      return acc;
    }, []);
    
  return newArr.reverse()
}

const getSidebars = async(dir, tutorials, sidebars = {}) => {
    const arr = fs.readdirSync(dir);
    const files = tutorials.length !== arr.length ? [tutorials[0].catalogueName] : arr;
    // const tutorials = await readJsonFile("tutorials.json");
    // files.forEach((file) => {
  for (let i = 0; i < files.length; i++) {
    const file = files[i]
    const root = dir+"/"+file;
    const catalogueName = tutorials.filter(e => e.catalogueName === file)[0].catalogueName;
    // 读取当前文件目录
    const filename = "SUMMARY.md"
    const isFileExists = await new Promise((resolve, reject) => {
      fs.readdir(root, async(err, files) => {
        if (err) {
          console.error('Error reading directory:', err);
          return;
        }
        // 检查是否存在指定文件
        const isFileExists = files.includes(filename);
        resolve(isFileExists)
      })
    }).then(res => {return res})
      if (isFileExists) {
          // 1、读取文件
          await new Promise((resolve, reject) => {
            fs.readFile(root+"/"+filename, 'utf8', (err, data) => {
              if (err) reject(err)
              flag = data.indexOf("##") === -1 ? false : true;
              const arr = getDirectory(data, catalogueName);
              resolve(arr)
            });
          }).then(res => {
            sidebars[file] = res;
            console.log(res);
          })
      } else {
            // 自动
            sidebars[file] = [
              {
                  type: "autogenerated",
                  dirName: file
              }
            ]
      }
  }
  return sidebars;
};

function readJsonFile(filePath) {
    return new Promise((resolve, reject) => {
      fs.readFile(filePath, 'utf8', (err, data) => {
        if (err) {
          console.log("error ===>", err);
          reject(err);
          return;
        }
        try {
          const jsonData = JSON.parse(data);
          resolve(jsonData);
        } catch (e) {
          console.log("error ===>", e);
          reject(e);
        }
      });
    });
}

function readModuleFile(filePath) {
  return new Promise((resolve, reject) => {
    fs.readFile(filePath, 'utf8', (err, data) => {
      if (err) {
        console.log("error ===>", err);
        reject(err);
        return;
      }
      try {
        const jsonData = JSON.parse(data.replace("module.exports = ","").replace(";",""));
        resolve(jsonData);
      } catch (e) {
        console.log("error ===>", e);
        reject(e);
      }
    });
  });
}

const getNavbarItems = async(dir, tutorials, navbarItems = []) => {
    // const files = fs.readdirSync(dir);
    const arr = fs.readdirSync(dir);
    const files = tutorials.length !== arr.length ? [tutorials[0].catalogueName] : arr;
    // const tutorials = await readJsonFile("tutorials.json");
    // 初始化
    // navbarItems.push({
    //     href: 'https://github.com/decert-me/tutorials',
    //     label: 'GitHub',
    //     position: 'right',
    // })
    tutorials.map((e, i) => {
      const file = files.filter(item => item === e.catalogueName)[0];
      navbarItems.push({
        type: 'doc',
        docId: file+"/"+e.startPage,
        position: 'left',
        label: e.label,
      })
    })
    return navbarItems;
};


async function generateSidebars(tutorials) {
  const sidebar = await getSidebars(DOCS_DIR, tutorials);
  const sidebars = await readModuleFile("sidebars.js");
  if (Object.keys(sidebars).length > tutorials.length) {
    const key = tutorials[0].catalogueName;
    sidebars[key] = sidebar[key]
    // 单个更新
    fs.writeFileSync(
      path.join(__dirname, 'sidebars.js'),
      `module.exports = ${JSON.stringify(sidebars, null, 2)};`
    );
  }else{
    // 全量更新
    // 侧边栏
    fs.writeFileSync(
      path.join(__dirname, 'sidebars.js'),
      `module.exports = ${JSON.stringify(sidebar, null, 2)};`
    );
  }
}

async function generateNavbarItemsFile(tutorials) {
    const navbarItems = await readModuleFile("navbarItems.js");
    const navbarItem = await getNavbarItems(DOCS_DIR, tutorials);

    if (Object.keys(navbarItems).length > tutorials.length) {
      const key = tutorials[0].catalogueName;
      navbarItems[key] = navbarItem[key]
      // 单个更新
      fs.writeFileSync(
        path.join(__dirname, 'navbarItems.js'),
        `module.exports = ${JSON.stringify(navbarItems, null, 2)};`
      );
    }else{
      // 全量更新
      // 侧边栏
      fs.writeFileSync(
        path.join(__dirname, 'navbarItems.js'),
        `module.exports = ${JSON.stringify(navbarItem, null, 2)};`
      );
    }
}


const main = async () => {
  const index = process.argv.slice(2)[0];
  const arr = await readJsonFile("tutorials.json");
  let tutorials = arr;
  if (index) {
    arr.map((e, i) => {
      if (e.catalogueName === index) {
        tutorials = [arr[i]]
      }
    })
  }

  await generateSidebars(tutorials);
  await generateNavbarItemsFile(tutorials); // 执行函数
}

main();